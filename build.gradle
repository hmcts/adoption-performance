plugins {
  id 'org.owasp.dependencycheck' version '12.1.5'
  id 'scala'
  id 'java-library'
  id 'io.gatling.gradle' version '3.14.5'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

tasks.withType(JavaExec) {
  // Configure the size of the JVM if necessary
  jvmArgs = ['-Xms1024m', '-Xmx2048m']
  /* Use the following args to build a report when a test was terminated
  args = [
      "--reports-only", "fact-20201109092032896",
      '--results-folder', file('build/reports/gatling').absolutePath,
      ]
  */
}

tasks.withType(Copy).all{
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

repositories {
  mavenCentral()
}

gatling {
  gatlingVersion '3.14.4'
  scalaVersion '2.13.11'
}

sourceSets {
  gatling {
    scala {
      srcDir 'src/gatling/simulations'
    }
    resources {
      srcDir 'src/gatling/resources'
    }
  }
}

dependencies {
  gatlingImplementation project(':common-performance')
}

dependencyCheck {
  suppressionFile = "common/common-performance/owasp/owasp-suppressions.xml"
  analyzers.assemblyEnabled = false
}

configurations {
  gatlingImplementation.extendsFrom implementation
  gatlingRuntimeOnly.extendsFrom runtimeOnly
}

/* Generate stats per transaction for use in Jenkins*/
ext {
  transactionNamesToGraph = ["AD_020_Login", "AD_430_Application_Submit", "AD_1000_Statement_Of_Truth"]
}

tasks.register('generateStats', JavaExec) {
  dependsOn tasks.named('gatlingRun')
  dependsOn tasks.named('compileGatlingScala')
  mainClass.set('stats.GenerateStatsByTxn')
  args = transactionNamesToGraph
  classpath = sourceSets.gatling.runtimeClasspath + project(":common-performance").sourceSets.main.runtimeClasspath
}

// Ensure it runs after Gatling
tasks.named('gatlingRun') {
  finalizedBy tasks.named('generateStats')
}